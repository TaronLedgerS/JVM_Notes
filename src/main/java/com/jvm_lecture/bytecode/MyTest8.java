package com.jvm_lecture.bytecode;

/*
    现代JVM在执行Java代码时，通常会将解释执行与编译执行二者结合起来
    所谓解释执行，是通过解释器来读取字节码，遇到相应的指令就去执行该指令。
    所谓编译执行，是通过即时编译器（Just In Time，JIT）将字节码转换为本地机器码来执行；
                 现在JVM会根据代码热点（频次高的代码）来生成相应的本地机器码。

    基于栈的指令集与基于寄存器的指令集的关系：
    1.JVM执行指令时所采取的方式是基于栈的指令集，有入栈出栈的两种操作
    2.基于栈的指令集便于不同平台之间移植，而基于寄存器的指令集与硬件架构紧密相关，无法做到可移植
    3.基于栈的指令集缺点在于完成相同操作，指令数量通常要比基于寄存器的指令集要多；
    4.基于栈的指令集在内存中完成操作，尽管有优化手段（频繁操作提前缓冲），还是相对慢一点；而基于寄存器的指令集是直接由CPU来执行，它是在高速缓冲区执行的，速度快很多

 */
public class MyTest8 {

    public int myCalculate(){
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;

        int result = (a + b - c) * d;

        return result;
    }
}
